//Generated by FuseIT WSDL2Apex (http://www.fuseit.com/Solutions/SFDC-Explorer/Help-WSDL-Parser.aspx)

@isTest
private class jbillingAPIAPI_Test {
	
	@isTest static void coverGeneratedCodeTypes() {
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI parentObject = new jbillingAPI();
		new jbillingAPI.abstractCollection();
		new jbillingAPI.abstractList();
		new jbillingAPI.abstractMap();
		new jbillingAPI.accountInformationTypeWS();
		new jbillingAPI.accountTypeWS();
		new jbillingAPI.addPlanPrice();
		new jbillingAPI.addPlanPriceResponse();
		new jbillingAPI.ageingWS();
		new jbillingAPI.applyOrderToInvoice();
		new jbillingAPI.applyOrderToInvoiceResponse();
		new jbillingAPI.applyPayment();
		new jbillingAPI.applyPaymentResponse();
		new jbillingAPI.arrayList();
		new jbillingAPI.assetAssignmentWS();
		new jbillingAPI.assetSearchResult();
		new jbillingAPI.assetStatusDTOEx();
		new jbillingAPI.assetTransitionDTOEx();
		new jbillingAPI.assetWS();
		new jbillingAPI.basicFilter();
		new jbillingAPI.billingProcessConfigurationWS();
		new jbillingAPI.billingProcessWS();
		new jbillingAPI.calculatePartnerCommissions();
		new jbillingAPI.calculatePartnerCommissionsAsync();
		new jbillingAPI.calculatePartnerCommissionsAsyncResponse();
		new jbillingAPI.calculatePartnerCommissionsResponse();
		new jbillingAPI.calculateSwapPlanChanges();
		new jbillingAPI.calculateSwapPlanChangesResponse();
		new jbillingAPI.commissionProcessConfigurationWS();
		new jbillingAPI.commissionProcessRunWS();
		new jbillingAPI.commissionWS();
		new jbillingAPI.companyWS();
		new jbillingAPI.contactWS();
		new jbillingAPI.create();
		new jbillingAPI.createAccountInformationType();
		new jbillingAPI.createAccountInformationTypeResponse();
		new jbillingAPI.createAccountType();
		new jbillingAPI.createAccountTypePrice();
		new jbillingAPI.createAccountTypePriceResponse();
		new jbillingAPI.createAccountTypeResponse();
		new jbillingAPI.createAsset();
		new jbillingAPI.createAssetResponse();
		new jbillingAPI.createCurrency();
		new jbillingAPI.createCurrencyResponse();
		new jbillingAPI.createCustomerNote();
		new jbillingAPI.createCustomerNoteResponse();
		new jbillingAPI.createCustomerPrice();
		new jbillingAPI.createCustomerPriceResponse();
		new jbillingAPI.createInvoice();
		new jbillingAPI.createInvoiceFromOrder();
		new jbillingAPI.createInvoiceFromOrderResponse();
		new jbillingAPI.createInvoiceResponse();
		new jbillingAPI.createInvoiceWithDate();
		new jbillingAPI.createInvoiceWithDateResponse();
		new jbillingAPI.createItem();
		new jbillingAPI.createItemCategory();
		new jbillingAPI.createItemCategoryResponse();
		new jbillingAPI.createItemResponse();
		new jbillingAPI.createMediationConfiguration();
		new jbillingAPI.createMediationConfigurationResponse();
		new jbillingAPI.createMetaField();
		new jbillingAPI.createMetaFieldGroup();
		new jbillingAPI.createMetaFieldGroupResponse();
		new jbillingAPI.createMetaFieldResponse();
		new jbillingAPI.createOrder();
		new jbillingAPI.createOrderAndInvoice();
		new jbillingAPI.createOrderAndInvoiceResponse();
		new jbillingAPI.createOrderPreAuthorize();
		new jbillingAPI.createOrderPreAuthorizeResponse();
		new jbillingAPI.createOrderResponse();
		new jbillingAPI.createPartner();
		new jbillingAPI.createPartnerResponse();
		new jbillingAPI.createPayment();
		new jbillingAPI.createPaymentLink();
		new jbillingAPI.createPaymentLinkResponse();
		new jbillingAPI.createPaymentResponse();
		new jbillingAPI.createPayments();
		new jbillingAPI.createPaymentsResponse();
		new jbillingAPI.createPlan();
		new jbillingAPI.createPlanResponse();
		new jbillingAPI.createPlugin();
		new jbillingAPI.createPluginResponse();
		new jbillingAPI.createResponse();
		new jbillingAPI.createResponseWS();
		new jbillingAPI.createUpdateBillingProcessConfiguration();
		new jbillingAPI.createUpdateBillingProcessConfigurationResponse();
		new jbillingAPI.createUpdateCommissionProcessConfiguration();
		new jbillingAPI.createUpdateCommissionProcessConfigurationResponse();
		new jbillingAPI.createUpdateNotification();
		new jbillingAPI.createUpdateNotificationResponse();
		new jbillingAPI.createUpdateOrder();
		new jbillingAPI.createUpdateOrderResponse();
		new jbillingAPI.createUser();
		new jbillingAPI.createUserCode();
		new jbillingAPI.createUserCodeResponse();
		new jbillingAPI.createUserResponse();
		new jbillingAPI.currencyWS();
		new jbillingAPI.customerNoteWS();
		new jbillingAPI.CxfMapDateListMetafield();
		new jbillingAPI.CxfMapIntegerDate();
		new jbillingAPI.CxfMapListDate();
		new jbillingAPI.CxfMapMapListMetafield();
		new jbillingAPI.CxfSMapDatePriceModel();
		new jbillingAPI.CxfSMapIntMetaFields();
		new jbillingAPI.CxfSMapStringString();
		new jbillingAPI.deleteAccountInformationType();
		new jbillingAPI.deleteAccountInformationTypeResponse();
		new jbillingAPI.deleteAccountType();
		new jbillingAPI.deleteAccountTypePrice();
		new jbillingAPI.deleteAccountTypePriceResponse();
		new jbillingAPI.deleteAccountTypeResponse();
		new jbillingAPI.deleteAsset();
		new jbillingAPI.deleteAssetResponse();
		new jbillingAPI.deleteCustomerPrice();
		new jbillingAPI.deleteCustomerPriceResponse();
		new jbillingAPI.deleteInvoice();
		new jbillingAPI.deleteInvoiceResponse();
		new jbillingAPI.deleteItem();
		new jbillingAPI.deleteItemCategory();
		new jbillingAPI.deleteItemCategoryResponse();
		new jbillingAPI.deleteItemResponse();
		new jbillingAPI.deleteMediationConfiguration();
		new jbillingAPI.deleteMediationConfigurationResponse();
		new jbillingAPI.deleteMetaField();
		new jbillingAPI.deleteMetaFieldGroup();
		new jbillingAPI.deleteMetaFieldGroupResponse();
		new jbillingAPI.deleteMetaFieldResponse();
		new jbillingAPI.deleteOrder();
		new jbillingAPI.deleteOrderPeriod();
		new jbillingAPI.deleteOrderPeriodResponse();
		new jbillingAPI.deleteOrderResponse();
		new jbillingAPI.deletePartner();
		new jbillingAPI.deletePartnerResponse();
		new jbillingAPI.deletePayment();
		new jbillingAPI.deletePaymentResponse();
		new jbillingAPI.deletePlan();
		new jbillingAPI.deletePlanResponse();
		new jbillingAPI.deletePlugin();
		new jbillingAPI.deletePluginResponse();
		new jbillingAPI.deleteUser();
		new jbillingAPI.deleteUserResponse();
		new jbillingAPI.discountLineWS();
		new jbillingAPI.findAssets();
		new jbillingAPI.findAssetsResponse();
		new jbillingAPI.findOrderForAsset();
		new jbillingAPI.findOrderForAssetResponse();
		new jbillingAPI.findOrdersForAssetAndDateRange();
		new jbillingAPI.findOrdersForAssetAndDateRangeResponse();
		new jbillingAPI.getAccountInformationType();
		new jbillingAPI.getAccountInformationTypeResponse();
		new jbillingAPI.getAccountType();
		new jbillingAPI.getAccountTypePrice();
		new jbillingAPI.getAccountTypePriceResponse();
		new jbillingAPI.getAccountTypePrices();
		new jbillingAPI.getAccountTypePricesResponse();
		new jbillingAPI.getAccountTypeResponse();
		new jbillingAPI.getAddonItems();
		new jbillingAPI.getAddonItemsResponse();
		new jbillingAPI.getAgeingConfiguration();
		new jbillingAPI.getAgeingConfigurationResponse();
		new jbillingAPI.getAgeingProcessStatus();
		new jbillingAPI.getAgeingProcessStatusResponse();
		new jbillingAPI.getAllAccountTypes();
		new jbillingAPI.getAllAccountTypesResponse();
		new jbillingAPI.getAllCommissionRuns();
		new jbillingAPI.getAllCommissionRunsResponse();
		new jbillingAPI.getAllInvoices();
		new jbillingAPI.getAllInvoicesForUser();
		new jbillingAPI.getAllInvoicesForUserResponse();
		new jbillingAPI.getAllInvoicesResponse();
		new jbillingAPI.getAllItemCategories();
		new jbillingAPI.getAllItemCategoriesByEntityId();
		new jbillingAPI.getAllItemCategoriesByEntityIdResponse();
		new jbillingAPI.getAllItemCategoriesResponse();
		new jbillingAPI.getAllItems();
		new jbillingAPI.getAllItemsByEntityId();
		new jbillingAPI.getAllItemsByEntityIdResponse();
		new jbillingAPI.getAllItemsResponse();
		new jbillingAPI.getAllMediationConfigurations();
		new jbillingAPI.getAllMediationConfigurationsResponse();
		new jbillingAPI.getAllMediationProcesses();
		new jbillingAPI.getAllMediationProcessesResponse();
		new jbillingAPI.getAllPlans();
		new jbillingAPI.getAllPlansResponse();
		new jbillingAPI.getAsset();
		new jbillingAPI.getAssetAssignmentsForAsset();
		new jbillingAPI.getAssetAssignmentsForAssetResponse();
		new jbillingAPI.getAssetAssignmentsForOrder();
		new jbillingAPI.getAssetAssignmentsForOrderResponse();
		new jbillingAPI.getAssetResponse();
		new jbillingAPI.getAssetsForCategory();
		new jbillingAPI.getAssetsForCategoryResponse();
		new jbillingAPI.getAssetsForItem();
		new jbillingAPI.getAssetsForItemResponse();
		new jbillingAPI.getAssetTransitions();
		new jbillingAPI.getAssetTransitionsResponse();
		new jbillingAPI.getAutoPaymentType();
		new jbillingAPI.getAutoPaymentTypeResponse();
		new jbillingAPI.getBillingProcess();
		new jbillingAPI.getBillingProcessConfiguration();
		new jbillingAPI.getBillingProcessConfigurationResponse();
		new jbillingAPI.getBillingProcessGeneratedInvoices();
		new jbillingAPI.getBillingProcessGeneratedInvoicesResponse();
		new jbillingAPI.getBillingProcessResponse();
		new jbillingAPI.getBillingProcessStatus();
		new jbillingAPI.getBillingProcessStatusResponse();
		new jbillingAPI.getCallerCompanyId();
		new jbillingAPI.getCallerCompanyIdResponse();
		new jbillingAPI.getCallerCurrencyId();
		new jbillingAPI.getCallerCurrencyIdResponse();
		new jbillingAPI.getCallerId();
		new jbillingAPI.getCallerIdResponse();
		new jbillingAPI.getCallerLanguageId();
		new jbillingAPI.getCallerLanguageIdResponse();
		new jbillingAPI.getChildItemCategories();
		new jbillingAPI.getChildItemCategoriesResponse();
		new jbillingAPI.getCommissionsByProcessRunId();
		new jbillingAPI.getCommissionsByProcessRunIdResponse();
		new jbillingAPI.getCompanies();
		new jbillingAPI.getCompaniesResponse();
		new jbillingAPI.getCompany();
		new jbillingAPI.getCompanyResponse();
		new jbillingAPI.getCurrencies();
		new jbillingAPI.getCurrenciesResponse();
		new jbillingAPI.getCurrentOrder();
		new jbillingAPI.getCurrentOrderResponse();
		new jbillingAPI.getCustomerPrice();
		new jbillingAPI.getCustomerPriceForDate();
		new jbillingAPI.getCustomerPriceForDateResponse();
		new jbillingAPI.getCustomerPriceResponse();
		new jbillingAPI.getCustomerPrices();
		new jbillingAPI.getCustomerPricesResponse();
		new jbillingAPI.getCustomersByUserCode();
		new jbillingAPI.getCustomersByUserCodeResponse();
		new jbillingAPI.getCustomersLinkedToUser();
		new jbillingAPI.getCustomersLinkedToUserResponse();
		new jbillingAPI.getInformationTypesForAccountType();
		new jbillingAPI.getInformationTypesForAccountTypeResponse();
		new jbillingAPI.getInvoicesByDate();
		new jbillingAPI.getInvoicesByDateResponse();
		new jbillingAPI.getInvoiceWS();
		new jbillingAPI.getInvoiceWSResponse();
		new jbillingAPI.getItem();
		new jbillingAPI.getItemByCategory();
		new jbillingAPI.getItemByCategoryResponse();
		new jbillingAPI.getItemCategoriesByPartner();
		new jbillingAPI.getItemCategoriesByPartnerResponse();
		new jbillingAPI.getItemCategoryById();
		new jbillingAPI.getItemCategoryByIdResponse();
		new jbillingAPI.getItemID();
		new jbillingAPI.getItemIDResponse();
		new jbillingAPI.getItemResponse();
		new jbillingAPI.getItemUsage();
		new jbillingAPI.getItemUsageResponse();
		new jbillingAPI.getLastBillingProcess();
		new jbillingAPI.getLastBillingProcessResponse();
		new jbillingAPI.getLastInvoices();
		new jbillingAPI.getLastInvoicesByItemType();
		new jbillingAPI.getLastInvoicesByItemTypeResponse();
		new jbillingAPI.getLastInvoicesResponse();
		new jbillingAPI.getLastOrders();
		new jbillingAPI.getLastOrdersByItemType();
		new jbillingAPI.getLastOrdersByItemTypeResponse();
		new jbillingAPI.getLastOrdersPage();
		new jbillingAPI.getLastOrdersPageResponse();
		new jbillingAPI.getLastOrdersResponse();
		new jbillingAPI.getLastPayments();
		new jbillingAPI.getLastPaymentsPage();
		new jbillingAPI.getLastPaymentsPageResponse();
		new jbillingAPI.getLastPaymentsResponse();
		new jbillingAPI.getLatestInvoice();
		new jbillingAPI.getLatestInvoiceByItemType();
		new jbillingAPI.getLatestInvoiceByItemTypeResponse();
		new jbillingAPI.getLatestInvoiceResponse();
		new jbillingAPI.getLatestOrder();
		new jbillingAPI.getLatestOrderByItemType();
		new jbillingAPI.getLatestOrderByItemTypeResponse();
		new jbillingAPI.getLatestOrderResponse();
		new jbillingAPI.getLatestPayment();
		new jbillingAPI.getLatestPaymentResponse();
		new jbillingAPI.getLinkedOrders();
		new jbillingAPI.getLinkedOrdersResponse();
		new jbillingAPI.getMediationErrorRecordsByMediationProcess();
		new jbillingAPI.getMediationErrorRecordsByMediationProcessResponse();
		new jbillingAPI.getMediationEventsForInvoice();
		new jbillingAPI.getMediationEventsForInvoiceResponse();
		new jbillingAPI.getMediationEventsForOrder();
		new jbillingAPI.getMediationEventsForOrderDateRange();
		new jbillingAPI.getMediationEventsForOrderDateRangeResponse();
		new jbillingAPI.getMediationEventsForOrderResponse();
		new jbillingAPI.getMediationProcess();
		new jbillingAPI.getMediationProcessResponse();
		new jbillingAPI.getMediationProcessStatus();
		new jbillingAPI.getMediationProcessStatusResponse();
		new jbillingAPI.getMediationRecordsByMediationProcess();
		new jbillingAPI.getMediationRecordsByMediationProcessResponse();
		new jbillingAPI.getMetaField();
		new jbillingAPI.getMetaFieldGroup();
		new jbillingAPI.getMetaFieldGroupResponse();
		new jbillingAPI.getMetaFieldGroupsForEntity();
		new jbillingAPI.getMetaFieldGroupsForEntityResponse();
		new jbillingAPI.getMetaFieldResponse();
		new jbillingAPI.getMetaFieldsForEntity();
		new jbillingAPI.getMetaFieldsForEntityResponse();
		new jbillingAPI.getNumberOfMediationRecordsByStatuses();
		new jbillingAPI.getNumberOfMediationRecordsByStatusesByMediationProcess();
		new jbillingAPI.getNumberOfMediationRecordsByStatusesByMediationProcessResponse();
		new jbillingAPI.getNumberOfMediationRecordsByStatusesResponse();
		new jbillingAPI.getOrder();
		new jbillingAPI.getOrderByPeriod();
		new jbillingAPI.getOrderByPeriodResponse();
		new jbillingAPI.getOrderLine();
		new jbillingAPI.getOrderLineResponse();
		new jbillingAPI.getOrderProcesses();
		new jbillingAPI.getOrderProcessesByInvoice();
		new jbillingAPI.getOrderProcessesByInvoiceResponse();
		new jbillingAPI.getOrderProcessesResponse();
		new jbillingAPI.getOrderResponse();
		new jbillingAPI.getOrdersByDate();
		new jbillingAPI.getOrdersByDateResponse();
		new jbillingAPI.getOrdersByUserCode();
		new jbillingAPI.getOrdersByUserCodeResponse();
		new jbillingAPI.getOrdersLinkedToUser();
		new jbillingAPI.getOrdersLinkedToUserResponse();
		new jbillingAPI.getPaperInvoicePDF();
		new jbillingAPI.getPaperInvoicePDFResponse();
		new jbillingAPI.getPartner();
		new jbillingAPI.getPartnerResponse();
		new jbillingAPI.getPayment();
		new jbillingAPI.getPaymentResponse();
		new jbillingAPI.getPaymentsByDate();
		new jbillingAPI.getPaymentsByDateResponse();
		new jbillingAPI.getPlansByAffectedItem();
		new jbillingAPI.getPlansByAffectedItemResponse();
		new jbillingAPI.getPlansBySubscriptionItem();
		new jbillingAPI.getPlansBySubscriptionItemResponse();
		new jbillingAPI.getPlanWS();
		new jbillingAPI.getPlanWSResponse();
		new jbillingAPI.getPluginWS();
		new jbillingAPI.getPluginWSResponse();
		new jbillingAPI.getPreference();
		new jbillingAPI.getPreferenceResponse();
		new jbillingAPI.getProvisioningCommandById();
		new jbillingAPI.getProvisioningCommandByIdResponse();
		new jbillingAPI.getProvisioningCommands();
		new jbillingAPI.getProvisioningCommandsResponse();
		new jbillingAPI.getProvisioningRequestById();
		new jbillingAPI.getProvisioningRequestByIdResponse();
		new jbillingAPI.getProvisioningRequests();
		new jbillingAPI.getProvisioningRequestsResponse();
		new jbillingAPI.getReviewBillingProcess();
		new jbillingAPI.getReviewBillingProcessResponse();
		new jbillingAPI.getSubscribedCustomers();
		new jbillingAPI.getSubscribedCustomersResponse();
		new jbillingAPI.getTotalRevenueByUser();
		new jbillingAPI.getTotalRevenueByUserResponse();
		new jbillingAPI.getUnpaidInvoices();
		new jbillingAPI.getUnpaidInvoicesResponse();
		new jbillingAPI.getUserCodesForUser();
		new jbillingAPI.getUserCodesForUserResponse();
		new jbillingAPI.getUserContactsWS();
		new jbillingAPI.getUserContactsWSResponse();
		new jbillingAPI.getUserId();
		new jbillingAPI.getUserIdByEmail();
		new jbillingAPI.getUserIdByEmailResponse();
		new jbillingAPI.getUserIdResponse();
		new jbillingAPI.getUserInvoicesByDate();
		new jbillingAPI.getUserInvoicesByDateResponse();
		new jbillingAPI.getUserInvoicesPage();
		new jbillingAPI.getUserInvoicesPageResponse();
		new jbillingAPI.getUserItemsByCategory();
		new jbillingAPI.getUserItemsByCategoryResponse();
		new jbillingAPI.getUserOrdersPage();
		new jbillingAPI.getUserOrdersPageResponse();
		new jbillingAPI.getUserPaymentInstrument();
		new jbillingAPI.getUserPaymentInstrumentResponse();
		new jbillingAPI.getUserPaymentsPage();
		new jbillingAPI.getUserPaymentsPageResponse();
		new jbillingAPI.getUsersByStatus();
		new jbillingAPI.getUsersByStatusResponse();
		new jbillingAPI.getUsersInStatus();
		new jbillingAPI.getUsersInStatusResponse();
		new jbillingAPI.getUsersNotInStatus();
		new jbillingAPI.getUsersNotInStatusResponse();
		new jbillingAPI.getUserSubscriptions();
		new jbillingAPI.getUserSubscriptionsResponse();
		new jbillingAPI.getUserTransitions();
		new jbillingAPI.getUserTransitionsAfterId();
		new jbillingAPI.getUserTransitionsAfterIdResponse();
		new jbillingAPI.getUserTransitionsResponse();
		new jbillingAPI.getUserWS();
		new jbillingAPI.getUserWSResponse();
		new jbillingAPI.hashMap();
		new jbillingAPI.initiateTermination();
		new jbillingAPI.initiateTerminationResponse();
		new jbillingAPI.internationalDescriptionWS();
		new jbillingAPI.invoice_line();
		new jbillingAPI.invoiceWS();
		new jbillingAPI.isAgeingProcessRunning();
		new jbillingAPI.isAgeingProcessRunningResponse();
		new jbillingAPI.isBillingRunning();
		new jbillingAPI.isBillingRunningResponse();
		new jbillingAPI.isCustomerSubscribed();
		new jbillingAPI.isCustomerSubscribedForDate();
		new jbillingAPI.isCustomerSubscribedForDateResponse();
		new jbillingAPI.isCustomerSubscribedResponse();
		new jbillingAPI.isMediationProcessRunning();
		new jbillingAPI.isMediationProcessRunningResponse();
		new jbillingAPI.isPartnerCommissionRunning();
		new jbillingAPI.isPartnerCommissionRunningResponse();
		new jbillingAPI.isUserSubscribedTo();
		new jbillingAPI.isUserSubscribedToResponse();
		new jbillingAPI.itemDependencyDTOEx();
		new jbillingAPI.itemDTOEx();
		new jbillingAPI.itemTypeWS();
		//new jbillingAPI.itemTypeWS_metaFieldsMap_element();
		//new jbillingAPI.itemTypeWS_metaFieldsMap_entry_element();
		//new jbillingAPI.jbillingAPIMediationErrorRecord();
		//new jbillingAPI.jbillingAPIMediationRecord();
		new jbillingAPI.KeyValueIntegerDate();
		new jbillingAPI.KeyValueIntListDate();
		new jbillingAPI.KeyValueMapDateListMetafield();
		new jbillingAPI.KeyValueMapMapListMetafield();
		new jbillingAPI.KeyValueSDatePriceModel();
		new jbillingAPI.KeyValueSIntMetaFields();
		new jbillingAPI.KeyValueSStringString();
		new jbillingAPI.mainSubscriptionWS();
		new jbillingAPI.mediationConfigurationWS();
		new jbillingAPI.mediationProcess();
		new jbillingAPI.messageDTO();
		new jbillingAPI.messageSection();
		new jbillingAPI.metaFieldGroupWS();
		new jbillingAPI.metaFieldValueWS();
		new jbillingAPI.metaFieldValueWSArray();
		new jbillingAPI.metaFieldWS();
		new jbillingAPI.notifyInvoiceByEmail();
		new jbillingAPI.notifyInvoiceByEmailResponse();
		new jbillingAPI.notifyPaymentByEmail();
		new jbillingAPI.notifyPaymentByEmailResponse();
		new jbillingAPI.orderChangePlanItemWS();
		new jbillingAPI.orderChangeWS();
		new jbillingAPI.orderLineUsagePoolWS();
		new jbillingAPI.orderLineWS();
		new jbillingAPI.orderPeriodWS();
		new jbillingAPI.orderProcessWS();
		new jbillingAPI.orderStatusWS();
		new jbillingAPI.orderWS();
		new jbillingAPI.partnerCommissionExceptionWS();
		new jbillingAPI.partnerCommissionValueWS();
		new jbillingAPI.partnerPayoutWS();
		new jbillingAPI.partnerReferralCommissionWS();
		new jbillingAPI.partnerWS();
		new jbillingAPI.payInvoice();
		new jbillingAPI.payInvoiceResponse();
		new jbillingAPI.payment_authorization();
		new jbillingAPI.paymentAuthorizationDTOEx();
		new jbillingAPI.paymentInformationWS();
		new jbillingAPI.paymentWS();
		new jbillingAPI.planItemBundleWS();
		new jbillingAPI.planItemWS();
		new jbillingAPI.planWS();
		new jbillingAPI.pluggableTaskWS();
		new jbillingAPI.preferenceTypeWS();
		new jbillingAPI.preferenceWS();
		new jbillingAPI.priceModelWS();
		new jbillingAPI.pricingField();
		new jbillingAPI.pricingFieldArray();
		new jbillingAPI.processCDR();
		new jbillingAPI.processCDRResponse();
		new jbillingAPI.processJMRData();
		new jbillingAPI.processJMRDataResponse();
		new jbillingAPI.processJMRRecord();
		new jbillingAPI.processJMRRecordResponse();
		new jbillingAPI.processPayment();
		new jbillingAPI.processPaymentResponse();
		new jbillingAPI.processPayments();
		new jbillingAPI.processPaymentsResponse();
		new jbillingAPI.processRunTotalWS();
		new jbillingAPI.processRunWS();
		new jbillingAPI.processStatusWS();
		new jbillingAPI.provisioningCommandWS();
		//new jbillingAPI.provisioningCommandWS_parameterMap_element();
		//new jbillingAPI.provisioningCommandWS_parameterMap_entry_element();
		new jbillingAPI.provisioningRequestWS();
		//new jbillingAPI.provisioningRequestWS_resultMap_element();
		//new jbillingAPI.provisioningRequestWS_resultMap_entry_element();
		new jbillingAPI.rateOrder();
		new jbillingAPI.rateOrderResponse();
		new jbillingAPI.rateOrders();
		new jbillingAPI.rateOrdersResponse();
		new jbillingAPI.recordCountWS();
		new jbillingAPI.releaseAsset();
		new jbillingAPI.releaseAssetResponse();
		new jbillingAPI.removeAllPaymentLinks();
		new jbillingAPI.removeAllPaymentLinksResponse();
		new jbillingAPI.removePaymentLink();
		new jbillingAPI.removePaymentLinkResponse();
		new jbillingAPI.rescheduleScheduledPlugin();
		new jbillingAPI.rescheduleScheduledPluginResponse();
		new jbillingAPI.reserveAsset();
		new jbillingAPI.reserveAssetResponse();
		new jbillingAPI.resetPassword();
		new jbillingAPI.resetPasswordResponse();
		new jbillingAPI.runRecycleForConfiguration();
		new jbillingAPI.runRecycleForConfigurationResponse();
		new jbillingAPI.runRecycleForProcess();
		new jbillingAPI.runRecycleForProcessResponse();
		new jbillingAPI.saveAgeingConfiguration();
		new jbillingAPI.saveAgeingConfigurationResponse();
		new jbillingAPI.saveLegacyInvoice();
		new jbillingAPI.saveLegacyInvoiceResponse();
		new jbillingAPI.saveLegacyOrder();
		new jbillingAPI.saveLegacyOrderResponse();
		new jbillingAPI.saveLegacyPayment();
		new jbillingAPI.saveLegacyPaymentResponse();
		new jbillingAPI.searchCriteria();
		new jbillingAPI.setAutoPaymentType();
		new jbillingAPI.setAutoPaymentTypeResponse();
		new jbillingAPI.setReviewApproval();
		new jbillingAPI.setReviewApprovalResponse();
		new jbillingAPI.startImportAssetJob();
		new jbillingAPI.startImportAssetJobResponse();
		new jbillingAPI.triggerAgeing();
		new jbillingAPI.triggerAgeingResponse();
		new jbillingAPI.triggerBilling();
		new jbillingAPI.triggerBillingAsync();
		new jbillingAPI.triggerBillingAsyncResponse();
		new jbillingAPI.triggerBillingResponse();
		new jbillingAPI.triggerMediation();
		new jbillingAPI.triggerMediationByConfiguration();
		new jbillingAPI.triggerMediationByConfigurationResponse();
		new jbillingAPI.triggerMediationResponse();
		new jbillingAPI.triggerProvisioning();
		new jbillingAPI.triggerProvisioningResponse();
		new jbillingAPI.triggerScheduledTask();
		new jbillingAPI.triggerScheduledTaskResponse();
		new jbillingAPI.undoMediation();
		new jbillingAPI.undoMediationResponse();
		new jbillingAPI.updateAccountInformationType();
		new jbillingAPI.updateAccountInformationTypeResponse();
		new jbillingAPI.updateAccountType();
		new jbillingAPI.updateAccountTypePrice();
		new jbillingAPI.updateAccountTypePriceResponse();
		new jbillingAPI.updateAccountTypeResponse();
		new jbillingAPI.updateAllMediationConfigurations();
		new jbillingAPI.updateAllMediationConfigurationsResponse();
		new jbillingAPI.updateAsset();
		new jbillingAPI.updateAssetResponse();
		new jbillingAPI.updateCompany();
		new jbillingAPI.updateCompanyResponse();
		new jbillingAPI.updateCurrencies();
		new jbillingAPI.updateCurrenciesResponse();
		new jbillingAPI.updateCurrency();
		new jbillingAPI.updateCurrencyResponse();
		new jbillingAPI.updateCurrentOrder();
		new jbillingAPI.updateCurrentOrderResponse();
		new jbillingAPI.updateCustomerPrice();
		new jbillingAPI.updateCustomerPriceResponse();
		new jbillingAPI.updateItem();
		new jbillingAPI.updateItemCategory();
		new jbillingAPI.updateItemCategoryResponse();
		new jbillingAPI.updateItemResponse();
		new jbillingAPI.updateLineProvisioningStatus();
		new jbillingAPI.updateLineProvisioningStatusResponse();
		new jbillingAPI.updateMetaField();
		new jbillingAPI.updateMetaFieldGroup();
		new jbillingAPI.updateMetaFieldGroupResponse();
		new jbillingAPI.updateMetaFieldResponse();
		new jbillingAPI.updateOrCreateOrderPeriod();
		new jbillingAPI.updateOrCreateOrderPeriodResponse();
		new jbillingAPI.updateOrder();
		new jbillingAPI.updateOrderAndLineProvisioningStatus();
		new jbillingAPI.updateOrderAndLineProvisioningStatusResponse();
		new jbillingAPI.updateOrderLine();
		new jbillingAPI.updateOrderLineResponse();
		new jbillingAPI.updateOrderPeriods();
		new jbillingAPI.updateOrderPeriodsResponse();
		new jbillingAPI.updateOrderResponse();
		new jbillingAPI.updateOrders();
		new jbillingAPI.updateOrdersResponse();
		new jbillingAPI.updatePartner();
		new jbillingAPI.updatePartnerResponse();
		new jbillingAPI.updatePayment();
		new jbillingAPI.updatePaymentResponse();
		new jbillingAPI.updatePlan();
		new jbillingAPI.updatePlanResponse();
		new jbillingAPI.updatePlugin();
		new jbillingAPI.updatePluginResponse();
		new jbillingAPI.updatePreference();
		new jbillingAPI.updatePreferenceResponse();
		new jbillingAPI.updatePreferences();
		new jbillingAPI.updatePreferencesResponse();
		new jbillingAPI.updateUser();
		new jbillingAPI.updateUserCode();
		new jbillingAPI.updateUserCodeResponse();
		new jbillingAPI.updateUserContact();
		new jbillingAPI.updateUserContactResponse();
		new jbillingAPI.updateUserResponse();
		new jbillingAPI.usage();
		new jbillingAPI.userCodeWS();
		new jbillingAPI.userExistsWithId();
		new jbillingAPI.userExistsWithIdResponse();
		new jbillingAPI.userExistsWithName();
		new jbillingAPI.userExistsWithNameResponse();
		new jbillingAPI.userTransitionResponseWS();
		new jbillingAPI.userWS();
		new jbillingAPI.validateMultiPurchase();
		new jbillingAPI.validateMultiPurchaseResponse();
		new jbillingAPI.validatePurchase();
		new jbillingAPI.validatePurchaseResponse();
		new jbillingAPI.validatePurchaseWS();
		new jbillingAPI.validationRuleWS();
	}
	@isTest static void coverCodeForaddPlanPrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		//jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		//testObject.addPlanPrice(null, null);
	}
	@isTest static void coverCodeForapplyOrderToInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		//jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		//System.assertEquals(null, testObject.applyOrderToInvoice(null, null));
	}
	@isTest static void coverCodeForapplyPayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		//jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		//System.assertEquals(null, testObject.applyPayment(null, null));
	}
	@isTest static void coverCodeForcalculatePartnerCommissions(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		//jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		//testObject.calculatePartnerCommissions();
	}
	@isTest static void coverCodeForcalculatePartnerCommissionsAsync(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		//jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		//testObject.calculatePartnerCommissionsAsync();
	}
	@isTest static void coverCodeForcalculateSwapPlanChanges(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		//jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		//System.assertEquals(null, testObject.calculateSwapPlanChanges(null, null, null, null, null));
	}
	@isTest static void coverCodeForcreate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		//jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		//System.assertEquals(null, testObject.create(null, null, null));
	}
	@isTest static void coverCodeForcreateAccountInformationType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createAccountInformationType(null));
	}
	@isTest static void coverCodeForcreateAccountType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createAccountType(null));
	}
	@isTest static void coverCodeForcreateAccountTypePrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createAccountTypePrice(null, null, null));
	}
	@isTest static void coverCodeForcreateAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createAsset(null));
	}
	@isTest static void coverCodeForcreateCurrency(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createCurrency(null));
	}
	@isTest static void coverCodeForcreateCustomerNote(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.createCustomerNote(null);
	}
	@isTest static void coverCodeForcreateCustomerPrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createCustomerPrice(null, null, null));
	}
	@isTest static void coverCodeForcreateInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createInvoice(null, null));
	}
	@isTest static void coverCodeForcreateInvoiceFromOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createInvoiceFromOrder(null, null));
	}
	@isTest static void coverCodeForcreateInvoiceWithDate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createInvoiceWithDate(null, null, null, null, null));
	}
	@isTest static void coverCodeForcreateItem(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createItem(null));
	}
	@isTest static void coverCodeForcreateItemCategory(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createItemCategory(null));
	}
	@isTest static void coverCodeForcreateMediationConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createMediationConfiguration(null));
	}
	@isTest static void coverCodeForcreateMetaField(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createMetaField(null));
	}
	@isTest static void coverCodeForcreateMetaFieldGroup(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createMetaFieldGroup(null));
	}
	@isTest static void coverCodeForcreateOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createOrder(null, null));
	}
	@isTest static void coverCodeForcreateOrderAndInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createOrderAndInvoice(null, null));
	}
	@isTest static void coverCodeForcreateOrderPreAuthorize(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createOrderPreAuthorize(null, null));
	}
	@isTest static void coverCodeForcreatePartner(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createPartner(null, null));
	}
	@isTest static void coverCodeForcreatePayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createPayment(null));
	}
	@isTest static void coverCodeForcreatePaymentLink(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.createPaymentLink(null, null);
	}
	@isTest static void coverCodeForcreatePayments(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createPayments(null));
	}
	@isTest static void coverCodeForcreatePlan(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createPlan(null));
	}
	@isTest static void coverCodeForcreatePlugin(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createPlugin(null));
	}
	@isTest static void coverCodeForcreateUpdateBillingProcessConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createUpdateBillingProcessConfiguration(null));
	}
	@isTest static void coverCodeForcreateUpdateCommissionProcessConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createUpdateCommissionProcessConfiguration(null));
	}
	@isTest static void coverCodeForcreateUpdateNotification(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.createUpdateNotification(null, null);
	}
	@isTest static void coverCodeForcreateUpdateOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createUpdateOrder(null, null));
	}
	@isTest static void coverCodeForcreateUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createUser(null));
	}
	@isTest static void coverCodeForcreateUserCode(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.createUserCode(null));
	}
	@isTest static void coverCodeFordeleteAccountInformationType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.deleteAccountInformationType(null));
	}
	@isTest static void coverCodeFordeleteAccountType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.deleteAccountType(null));
	}
	@isTest static void coverCodeFordeleteAccountTypePrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteAccountTypePrice(null, null);
	}
	@isTest static void coverCodeFordeleteAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteAsset(null);
	}
	@isTest static void coverCodeFordeleteCustomerPrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteCustomerPrice(null, null);
	}
	@isTest static void coverCodeFordeleteInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteInvoice(null);
	}
	@isTest static void coverCodeFordeleteItem(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteItem(null);
	}
	@isTest static void coverCodeFordeleteItemCategory(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteItemCategory(null);
	}
	@isTest static void coverCodeFordeleteMediationConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteMediationConfiguration(null);
	}
	@isTest static void coverCodeFordeleteMetaField(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteMetaField(null);
	}
	@isTest static void coverCodeFordeleteMetaFieldGroup(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteMetaFieldGroup(null);
	}
	@isTest static void coverCodeFordeleteOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.deleteOrder(null));
	}
	@isTest static void coverCodeFordeleteOrderPeriod(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.deleteOrderPeriod(null));
	}
	@isTest static void coverCodeFordeletePartner(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deletePartner(null);
	}
	@isTest static void coverCodeFordeletePayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deletePayment(null);
	}
	@isTest static void coverCodeFordeletePlan(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deletePlan(null);
	}
	@isTest static void coverCodeFordeletePlugin(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deletePlugin(null);
	}
	@isTest static void coverCodeFordeleteUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.deleteUser(null);
	}
	@isTest static void coverCodeForfindAssets(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.findAssets(null, null));
	}
	@isTest static void coverCodeForfindOrderForAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.findOrderForAsset(null, null));
	}
	@isTest static void coverCodeForfindOrdersForAssetAndDateRange(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.findOrdersForAssetAndDateRange(null, null, null));
	}
	@isTest static void coverCodeForgetAccountInformationType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAccountInformationType(null));
	}
	@isTest static void coverCodeForgetAccountType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAccountType(null));
	}
	@isTest static void coverCodeForgetAccountTypePrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAccountTypePrice(null, null));
	}
	@isTest static void coverCodeForgetAccountTypePrices(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAccountTypePrices(null));
	}
	@isTest static void coverCodeForgetAddonItems(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAddonItems(null));
	}
	@isTest static void coverCodeForgetAgeingConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAgeingConfiguration(null));
	}
	@isTest static void coverCodeForgetAgeingProcessStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAgeingProcessStatus());
	}
	@isTest static void coverCodeForgetAllAccountTypes(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllAccountTypes());
	}
	@isTest static void coverCodeForgetAllCommissionRuns(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllCommissionRuns());
	}
	@isTest static void coverCodeForgetAllInvoices(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllInvoices(null));
	}
	@isTest static void coverCodeForgetAllInvoicesForUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllInvoicesForUser(null));
	}
	@isTest static void coverCodeForgetAllItemCategories(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllItemCategories());
	}
	@isTest static void coverCodeForgetAllItemCategoriesByEntityId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllItemCategoriesByEntityId(null));
	}
	@isTest static void coverCodeForgetAllItems(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllItems());
	}
	@isTest static void coverCodeForgetAllItemsByEntityId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllItemsByEntityId(null));
	}
	@isTest static void coverCodeForgetAllMediationConfigurations(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllMediationConfigurations());
	}
	@isTest static void coverCodeForgetAllMediationProcesses(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllMediationProcesses());
	}
	@isTest static void coverCodeForgetAllPlans(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAllPlans());
	}
	@isTest static void coverCodeForgetAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAsset(null));
	}
	@isTest static void coverCodeForgetAssetAssignmentsForAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAssetAssignmentsForAsset(null));
	}
	@isTest static void coverCodeForgetAssetAssignmentsForOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAssetAssignmentsForOrder(null));
	}
	@isTest static void coverCodeForgetAssetsForCategory(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAssetsForCategory(null));
	}
	@isTest static void coverCodeForgetAssetsForItem(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAssetsForItem(null));
	}
	@isTest static void coverCodeForgetAssetTransitions(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAssetTransitions(null));
	}
	@isTest static void coverCodeForgetAutoPaymentType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getAutoPaymentType(null));
	}
	@isTest static void coverCodeForgetBillingProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getBillingProcess(null));
	}
	@isTest static void coverCodeForgetBillingProcessConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getBillingProcessConfiguration());
	}
	@isTest static void coverCodeForgetBillingProcessGeneratedInvoices(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getBillingProcessGeneratedInvoices(null));
	}
	@isTest static void coverCodeForgetBillingProcessStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getBillingProcessStatus());
	}
	@isTest static void coverCodeForgetCallerCompanyId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCallerCompanyId());
	}
	@isTest static void coverCodeForgetCallerCurrencyId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCallerCurrencyId());
	}
	@isTest static void coverCodeForgetCallerId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCallerId());
	}
	@isTest static void coverCodeForgetCallerLanguageId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCallerLanguageId());
	}
	@isTest static void coverCodeForgetChildItemCategories(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getChildItemCategories(null));
	}
	@isTest static void coverCodeForgetCommissionsByProcessRunId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCommissionsByProcessRunId(null));
	}
	@isTest static void coverCodeForgetCompanies(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCompanies());
	}
	@isTest static void coverCodeForgetCompany(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCompany());
	}
	@isTest static void coverCodeForgetCurrencies(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCurrencies());
	}
	@isTest static void coverCodeForgetCurrentOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCurrentOrder(null, null));
	}
	@isTest static void coverCodeForgetCustomerPrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCustomerPrice(null, null));
	}
	@isTest static void coverCodeForgetCustomerPriceForDate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCustomerPriceForDate(null, null, null, null));
	}
	@isTest static void coverCodeForgetCustomerPrices(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCustomerPrices(null));
	}
	@isTest static void coverCodeForgetCustomersByUserCode(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCustomersByUserCode(null));
	}
	@isTest static void coverCodeForgetCustomersLinkedToUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getCustomersLinkedToUser(null));
	}
	@isTest static void coverCodeForgetInformationTypesForAccountType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getInformationTypesForAccountType(null));
	}
	@isTest static void coverCodeForgetInvoicesByDate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getInvoicesByDate(null, null));
	}
	@isTest static void coverCodeForgetInvoiceWS(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getInvoiceWS(null));
	}
	@isTest static void coverCodeForgetItem(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getItem(null, null, null));
	}
	@isTest static void coverCodeForgetItemByCategory(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getItemByCategory(null));
	}
	@isTest static void coverCodeForgetItemCategoriesByPartner(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getItemCategoriesByPartner(null, null));
	}
	@isTest static void coverCodeForgetItemCategoryById(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getItemCategoryById(null));
	}
	@isTest static void coverCodeForgetItemID(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getItemID(null));
	}
	@isTest static void coverCodeForgetItemUsage(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getItemUsage(null, null, null, null, null, null));
	}
	@isTest static void coverCodeForgetLastBillingProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastBillingProcess());
	}
	@isTest static void coverCodeForgetLastInvoices(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastInvoices(null, null));
	}
	@isTest static void coverCodeForgetLastInvoicesByItemType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastInvoicesByItemType(null, null, null));
	}
	@isTest static void coverCodeForgetLastOrders(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastOrders(null, null));
	}
	@isTest static void coverCodeForgetLastOrdersByItemType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastOrdersByItemType(null, null, null));
	}
	@isTest static void coverCodeForgetLastOrdersPage(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastOrdersPage(null, null, null));
	}
	@isTest static void coverCodeForgetLastPayments(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastPayments(null, null));
	}
	@isTest static void coverCodeForgetLastPaymentsPage(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLastPaymentsPage(null, null, null));
	}
	@isTest static void coverCodeForgetLatestInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLatestInvoice(null));
	}
	@isTest static void coverCodeForgetLatestInvoiceByItemType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLatestInvoiceByItemType(null, null));
	}
	@isTest static void coverCodeForgetLatestOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLatestOrder(null));
	}
	@isTest static void coverCodeForgetLatestOrderByItemType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLatestOrderByItemType(null, null));
	}
	@isTest static void coverCodeForgetLatestPayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLatestPayment(null));
	}
	@isTest static void coverCodeForgetLinkedOrders(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getLinkedOrders(null));
	}
	@isTest static void coverCodeForgetMediationErrorRecordsByMediationProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMediationErrorRecordsByMediationProcess(null, null));
	}
	@isTest static void coverCodeForgetMediationEventsForInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMediationEventsForInvoice(null));
	}
	@isTest static void coverCodeForgetMediationEventsForOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMediationEventsForOrder(null));
	}
	@isTest static void coverCodeForgetMediationEventsForOrderDateRange(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMediationEventsForOrderDateRange(null, null, null, null, null));
	}
	@isTest static void coverCodeForgetMediationProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMediationProcess(null));
	}
	@isTest static void coverCodeForgetMediationProcessStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMediationProcessStatus());
	}
	@isTest static void coverCodeForgetMediationRecordsByMediationProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMediationRecordsByMediationProcess(null, null, null, null, null));
	}
	@isTest static void coverCodeForgetMetaField(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMetaField(null));
	}
	@isTest static void coverCodeForgetMetaFieldGroup(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMetaFieldGroup(null));
	}
	@isTest static void coverCodeForgetMetaFieldGroupsForEntity(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMetaFieldGroupsForEntity(null));
	}
	@isTest static void coverCodeForgetMetaFieldsForEntity(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getMetaFieldsForEntity(null));
	}
	@isTest static void coverCodeForgetNumberOfMediationRecordsByStatuses(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getNumberOfMediationRecordsByStatuses());
	}
	@isTest static void coverCodeForgetNumberOfMediationRecordsByStatusesByMediationProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getNumberOfMediationRecordsByStatusesByMediationProcess(null));
	}
	@isTest static void coverCodeForgetOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrder(null));
	}
	@isTest static void coverCodeForgetOrderByPeriod(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrderByPeriod(null, null));
	}
	@isTest static void coverCodeForgetOrderLine(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrderLine(null));
	}
	@isTest static void coverCodeForgetOrderProcesses(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrderProcesses(null));
	}
	@isTest static void coverCodeForgetOrderProcessesByInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrderProcessesByInvoice(null));
	}
	@isTest static void coverCodeForgetOrdersByDate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrdersByDate(null, null, null));
	}
	@isTest static void coverCodeForgetOrdersByUserCode(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrdersByUserCode(null));
	}
	@isTest static void coverCodeForgetOrdersLinkedToUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getOrdersLinkedToUser(null));
	}
	@isTest static void coverCodeForgetPaperInvoicePDF(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPaperInvoicePDF(null));
	}
	@isTest static void coverCodeForgetPartner(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPartner(null));
	}
	@isTest static void coverCodeForgetPayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPayment(null));
	}
	@isTest static void coverCodeForgetPaymentsByDate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPaymentsByDate(null, null, null));
	}
	@isTest static void coverCodeForgetPlansByAffectedItem(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPlansByAffectedItem(null));
	}
	@isTest static void coverCodeForgetPlansBySubscriptionItem(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPlansBySubscriptionItem(null));
	}
	@isTest static void coverCodeForgetPlanWS(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPlanWS(null));
	}
	@isTest static void coverCodeForgetPluginWS(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPluginWS(null));
	}
	@isTest static void coverCodeForgetPreference(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getPreference(null));
	}
	@isTest static void coverCodeForgetProvisioningCommandById(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getProvisioningCommandById(null));
	}
	@isTest static void coverCodeForgetProvisioningCommands(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getProvisioningCommands(null, null));
	}
	@isTest static void coverCodeForgetProvisioningRequestById(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getProvisioningRequestById(null));
	}
	@isTest static void coverCodeForgetProvisioningRequests(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getProvisioningRequests(null));
	}
	@isTest static void coverCodeForgetReviewBillingProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getReviewBillingProcess());
	}
	@isTest static void coverCodeForgetSubscribedCustomers(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getSubscribedCustomers(null));
	}
	@isTest static void coverCodeForgetTotalRevenueByUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getTotalRevenueByUser(null));
	}
	@isTest static void coverCodeForgetUnpaidInvoices(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUnpaidInvoices(null));
	}
	@isTest static void coverCodeForgetUserCodesForUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserCodesForUser(null));
	}
	@isTest static void coverCodeForgetUserContactsWS(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserContactsWS(null));
	}
	@isTest static void coverCodeForgetUserId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserId(null));
	}
	@isTest static void coverCodeForgetUserIdByEmail(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserIdByEmail(null));
	}
	@isTest static void coverCodeForgetUserInvoicesByDate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserInvoicesByDate(null, null, null));
	}
	@isTest static void coverCodeForgetUserInvoicesPage(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserInvoicesPage(null, null, null));
	}
	@isTest static void coverCodeForgetUserItemsByCategory(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserItemsByCategory(null, null));
	}
	@isTest static void coverCodeForgetUserOrdersPage(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserOrdersPage(null, null, null));
	}
	@isTest static void coverCodeForgetUserPaymentInstrument(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserPaymentInstrument(null));
	}
	@isTest static void coverCodeForgetUserPaymentsPage(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserPaymentsPage(null, null, null));
	}
	@isTest static void coverCodeForgetUsersByStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUsersByStatus(null, null));
	}
	@isTest static void coverCodeForgetUsersInStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUsersInStatus(null));
	}
	@isTest static void coverCodeForgetUsersNotInStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUsersNotInStatus(null));
	}
	@isTest static void coverCodeForgetUserSubscriptions(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserSubscriptions(null));
	}
	@isTest static void coverCodeForgetUserTransitions(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserTransitions(null, null));
	}
	@isTest static void coverCodeForgetUserTransitionsAfterId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserTransitionsAfterId(null));
	}
	@isTest static void coverCodeForgetUserWS(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.getUserWS(null));
	}
	@isTest static void coverCodeForinitiateTermination(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.initiateTermination(null, null, null);
	}
	@isTest static void coverCodeForisAgeingProcessRunning(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.isAgeingProcessRunning());
	}
	@isTest static void coverCodeForisBillingRunning(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.isBillingRunning(null));
	}
	@isTest static void coverCodeForisCustomerSubscribed(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.isCustomerSubscribed(null, null));
	}
	@isTest static void coverCodeForisCustomerSubscribedForDate(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.isCustomerSubscribedForDate(null, null, null));
	}
	@isTest static void coverCodeForisMediationProcessRunning(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.isMediationProcessRunning());
	}
	@isTest static void coverCodeForisPartnerCommissionRunning(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.isPartnerCommissionRunning());
	}
	@isTest static void coverCodeForisUserSubscribedTo(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.isUserSubscribedTo(null, null));
	}
	@isTest static void coverCodeFornotifyInvoiceByEmail(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.notifyInvoiceByEmail(null));
	}
	@isTest static void coverCodeFornotifyPaymentByEmail(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.notifyPaymentByEmail(null));
	}
	@isTest static void coverCodeForpayInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.payInvoice(null));
	}
	@isTest static void coverCodeForprocessCDR(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.processCDR(null, null));
	}
	@isTest static void coverCodeForprocessJMRData(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.processJMRData(null, null, null, null, null, null, null, null, null));
	}
	@isTest static void coverCodeForprocessJMRRecord(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.processJMRRecord(null, null));
	}
	@isTest static void coverCodeForprocessPayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.processPayment(null, null));
	}
	@isTest static void coverCodeForprocessPayments(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.processPayments(null, null));
	}
	@isTest static void coverCodeForrateOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.rateOrder(null, null));
	}
	@isTest static void coverCodeForrateOrders(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.rateOrders(null, null));
	}
	@isTest static void coverCodeForreleaseAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.releaseAsset(null, null);
	}
	@isTest static void coverCodeForremoveAllPaymentLinks(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.removeAllPaymentLinks(null);
	}
	@isTest static void coverCodeForremovePaymentLink(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.removePaymentLink(null, null);
	}
	@isTest static void coverCodeForrescheduleScheduledPlugin(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.rescheduleScheduledPlugin(null);
	}
	@isTest static void coverCodeForreserveAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.reserveAsset(null, null));
	}
	@isTest static void coverCodeForresetPassword(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.resetPassword(null);
	}
	@isTest static void coverCodeForrunRecycleForConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.runRecycleForConfiguration(null));
	}
	@isTest static void coverCodeForrunRecycleForProcess(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.runRecycleForProcess(null));
	}
	@isTest static void coverCodeForsaveAgeingConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.saveAgeingConfiguration(null, null);
	}
	@isTest static void coverCodeForsaveLegacyInvoice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.saveLegacyInvoice(null));
	}
	@isTest static void coverCodeForsaveLegacyOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.saveLegacyOrder(null));
	}
	@isTest static void coverCodeForsaveLegacyPayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.saveLegacyPayment(null));
	}
	@isTest static void coverCodeForsetAutoPaymentType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.setAutoPaymentType(null, null, null);
	}
	@isTest static void coverCodeForsetReviewApproval(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.setReviewApproval(null));
	}
	@isTest static void coverCodeForstartImportAssetJob(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.startImportAssetJob(null, null, null, null, null, null, null));
	}
	@isTest static void coverCodeFortriggerAgeing(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.triggerAgeing(null);
	}
	@isTest static void coverCodeFortriggerBilling(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.triggerBilling(null));
	}
	@isTest static void coverCodeFortriggerBillingAsync(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.triggerBillingAsync(null);
	}
	@isTest static void coverCodeFortriggerMediation(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.triggerMediation();
	}
	@isTest static void coverCodeFortriggerMediationByConfiguration(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.triggerMediationByConfiguration(null));
	}
	@isTest static void coverCodeFortriggerProvisioning(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.triggerProvisioning();
	}
	@isTest static void coverCodeFortriggerScheduledTask(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.triggerScheduledTask(null, null);
	}
	@isTest static void coverCodeForundoMediation(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.undoMediation(null);
	}
	@isTest static void coverCodeForupdateAccountInformationType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateAccountInformationType(null);
	}
	@isTest static void coverCodeForupdateAccountType(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.updateAccountType(null));
	}
	@isTest static void coverCodeForupdateAccountTypePrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateAccountTypePrice(null, null, null);
	}
	@isTest static void coverCodeForupdateAllMediationConfigurations(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.updateAllMediationConfigurations(null));
	}
	@isTest static void coverCodeForupdateAsset(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateAsset(null);
	}
	@isTest static void coverCodeForupdateCompany(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateCompany(null);
	}
	@isTest static void coverCodeForupdateCurrencies(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateCurrencies(null);
	}
	@isTest static void coverCodeForupdateCurrency(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateCurrency(null);
	}
	@isTest static void coverCodeForupdateCurrentOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.updateCurrentOrder(null, null, null, null, null));
	}
	@isTest static void coverCodeForupdateCustomerPrice(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateCustomerPrice(null, null, null);
	}
	@isTest static void coverCodeForupdateItem(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateItem(null);
	}
	@isTest static void coverCodeForupdateItemCategory(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateItemCategory(null);
	}
	@isTest static void coverCodeForupdateLineProvisioningStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateLineProvisioningStatus(null, null);
	}
	@isTest static void coverCodeForupdateMetaField(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateMetaField(null);
	}
	@isTest static void coverCodeForupdateMetaFieldGroup(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateMetaFieldGroup(null);
	}
	@isTest static void coverCodeForupdateOrCreateOrderPeriod(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.updateOrCreateOrderPeriod(null));
	}
	@isTest static void coverCodeForupdateOrder(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateOrder(null, null);
	}
	@isTest static void coverCodeForupdateOrderAndLineProvisioningStatus(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateOrderAndLineProvisioningStatus(null, null, null);
	}
	@isTest static void coverCodeForupdateOrderLine(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateOrderLine(null);
	}
	@isTest static void coverCodeForupdateOrderPeriods(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.updateOrderPeriods(null));
	}
	@isTest static void coverCodeForupdateOrders(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateOrders(null, null);
	}
	@isTest static void coverCodeForupdatePartner(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updatePartner(null, null);
	}
	@isTest static void coverCodeForupdatePayment(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updatePayment(null);
	}
	@isTest static void coverCodeForupdatePlan(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updatePlan(null);
	}
	@isTest static void coverCodeForupdatePlugin(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updatePlugin(null);
	}
	@isTest static void coverCodeForupdatePreference(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updatePreference(null);
	}
	@isTest static void coverCodeForupdatePreferences(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updatePreferences(null);
	}
	@isTest static void coverCodeForupdateUser(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateUser(null);
	}
	@isTest static void coverCodeForupdateUserCode(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateUserCode(null);
	}
	@isTest static void coverCodeForupdateUserContact(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		testObject.updateUserContact(null, null);
	}
	@isTest static void coverCodeForuserExistsWithId(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.userExistsWithId(null));
	}
	@isTest static void coverCodeForuserExistsWithName(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.userExistsWithName(null));
	}
	@isTest static void coverCodeForvalidateMultiPurchase(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.validateMultiPurchase(null, null, null));
	}
	@isTest static void coverCodeForvalidatePurchase(){
		Test.setMock(WebServiceMock.class, new WebServiceMockImpl());
		jbillingAPI.apiServicePort testObject = new jbillingAPI.apiServicePort();
		System.assertEquals(null, testObject.validatePurchase(null, null, null));
	}
}